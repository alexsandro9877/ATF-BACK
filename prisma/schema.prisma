// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Customer {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  password   String 
  acesso     String[]
  token      String
  imagem     String[]
  partner    String[]
  accounts   Account[]
  status     Boolean
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  @@map("customer")
}

model Account {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  aplication  String
  routes      String[]
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  products    Product[]
  user        User[]
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
  customerId  String   
  
  @@map("account")
}

model Product {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  cod_prod        Int
  cod_prod_origem Int
  desc_marca      String
  desc_cor        String[]
  ind_prod_peso   String
  desc_prod       String[]
  ind_prod_status Boolean
  created_at      DateTime? @default(now())
  updated_at      DateTime? @default(now())//@updatedAt
  images          Image[]
  ean_codes       Ean[]
  prices          Price[]
  measures        Measure[]
  departmentId    String?   
  categoryId      String?   
  subcategoryId   String?   
  sectionId       String?   
  groupId         String?   
  subgroupId      String?
  accountId       String?   @db.ObjectId
  account         Account?  @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("product")
}

model Image {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  end_link_imagem String
  cod_prod        Int
  productId       String    @db.ObjectId
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Ean {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  ean             String[]
  emba            Int
  status          Boolean
  cod_prod        Int
  productId       String    @db.ObjectId
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Price {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  status          Boolean
  cod_prod        Int
  price           String 
  productId       String    @db.ObjectId
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Measure {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  ean_prod         String[]
  unm_desc         String
  prod_altura      Float
  prod_larg        Float
  prod_comprimento Float
  prod_peso_bruto  Float
  prod_peso_liquido Float
  prod_peso_unm    Float
  prod_mtc         Float
  cod_prod         Int
  productId        String    @db.ObjectId
  product          Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String       @unique
  phone         String
  password      String
  picture       String
  status        Boolean
  azp           String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  accountId     String?      @db.ObjectId
  account       Account?     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  // Relacionamentos
  roles         String[]
  permissions   String[]
  visibleRoutes String[]
  theme         Theme[]

  @@map("user")
}

model Theme {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  colorPrimary      String
  colorInfo         String
  colorTextBase     String
  colorBgBase       Json
  colorTextTertiary Json
  colorTextSecondary Json
 userId       String?   @db.ObjectId
  user         User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("theme")
}

// Novo modelo para upload de imagem
model UploadImagem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  accountId String
  imageData Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("upload_imagem")
}
